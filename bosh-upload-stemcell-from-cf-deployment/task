#!/bin/bash
set -eux

# shellcheck disable=SC1091
source cf-deployment-concourse-tasks/shared-functions

check_upload_stemcell_params() {
  if [ -z "$INFRASTRUCTURE" ]; then
    echo "INFRASTRUCTURE has not been set"
    exit 1
  fi
  local supported_infrastructures
  supported_infrastructures=("aws" "google" "boshlite" "bosh-lite" "vsphere" "azure")
  any_matched=false
  for iaas in ${supported_infrastructures[*]}; do
    if [ "${INFRASTRUCTURE}" == "${iaas}" ]; then
      any_matched=true
      break
    fi
  done
  if [ "$any_matched" = false ]; then
    echo "${INFRASTRUCTURE} is not supported; please choose a value from ${supported_infrastructures[*]}"
    exit 1
  fi
}

upload_stemcell() {
  # Read potentially variable stemcell paramaters out of cf-deployment with bosh
  local os
  os=$1
  local version
  version=$2

  # Hardcode a couple of stable stemcell paramaters
  local stemcells_url
  stemcells_url="https://bosh.io/d/stemcells"

  local stemcell_name

  if [ "$INFRASTRUCTURE" = "aws" ]; then
    stemcell_name="bosh-aws-xen-hvm"
  elif [ "$INFRASTRUCTURE" = "google" ]; then
    stemcell_name="bosh-google-kvm"
  elif [ "$INFRASTRUCTURE" = "boshlite" ]; then
    stemcell_name="bosh-warden-boshlite"
  elif [ "$INFRASTRUCTURE" = "bosh-lite" ]; then
    stemcell_name="bosh-warden-boshlite"
  elif [ "$INFRASTRUCTURE" = "vsphere" ]; then
    stemcell_name="bosh-vsphere-esxi"
  elif [ "$INFRASTRUCTURE" = "azure" ]; then
    stemcell_name="bosh-azure-hyperv"
  fi

  stemcell_name="${stemcell_name}-${os}-go_agent"
  if [ "$version" = "latest" ]; then
    full_stemcell_url="${stemcells_url}/${stemcell_name}"
  else
    full_stemcell_url="${stemcells_url}/${stemcell_name}?v=${version}"
  fi

  # If bosh already has our stemcell, exit 0
  if [ "${existing_stemcell}" ]; then
    echo "Task bosh-upload-stemcell-from-cf-deployment:"
    echo "Stemcell '${stemcell_name}/${version}' already exists.  Exiting..."
    return
  fi

  # If bosh.io doesn't have our stemcell, exit 2
  local stemcell_exists
  stemcell_exists=$(wget -S --spider "${full_stemcell_url}" > /dev/null 2>&1)
  if [ stemcell_exists -ne 0 ]; then
    echo "Error: Could not find a [ $os ] stemcell for IaaS [ $INFRASTRUCTURE ] on bosh.io. Please double-check that the IaaS/OS combination is supported."
    exit 2 #POSIX 'No such file or directory'
  fi

  # ... otherwise, begin the upload process
  bosh \
    -n \
    upload-stemcell \
    "${full_stemcell_url}"
}

function upload_stemcells() {
  local arguments=''
  for op in ${OPS_FILES_WITH_STEMCELLS}
  do
    arguments="${arguments} -o cf-deployment/${op}"
  done

  bosh interpolate ${arguments} cf-deployment/${MANIFEST_FILE} > /tmp/cf.yml

  local stemcells_json=$(ruby -rjson -ryaml -e "puts YAML.load_file('/tmp/cf.yml').to_json" | jq .stemcells)
  local size=$(echo ${stemcells_json} | jq 'length')

  for i in `seq 0 $((size - 1))`
  do
    local os=$(echo ${stemcells_json} | jq -r .[$i].os)
    local version=$(echo ${stemcells_json} | jq -r .[$i].version)
    upload_stemcell ${os} ${version}
  done
}

main() {
  check_upload_stemcell_params
  setup_bosh_env_vars
  upload_stemcells
}

main

